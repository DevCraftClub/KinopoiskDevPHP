<?php

/**
 * –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –≤ KinopoiskDev
 * 
 * –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
 * - –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–∏–ª—å–º—ã
 * - –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –æ—Ç–∑—ã–≤–æ–≤
 * - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
 * - –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–æ–≤
 * - –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤
 */

require_once __DIR__ . '/../vendor/autoload.php';

use KinopoiskDev\Http\ReviewRequests;
use KinopoiskDev\Http\MovieRequests;
use KinopoiskDev\Filter\ReviewSearchFilter;
use KinopoiskDev\Enums\ReviewType;
use KinopoiskDev\Exceptions\KinopoiskDevException;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if (!getenv('KINOPOISK_TOKEN')) {
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω API. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è KINOPOISK_TOKEN\n";
    exit(1);
}

echo "‚≠ê KinopoiskDev - –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏\n";
echo "==================================================\n\n";

try {
    $reviewRequests = new \KinopoiskDev\Http\ReviewRequests(useCache: true);
    $movieRequests = new \KinopoiskDev\Http\MovieRequests(useCache: true);
    
    // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ñ–∏–ª—å–º
    echo "üìù 1. –û—Ç–∑—ã–≤—ã –Ω–∞ —Ñ–∏–ª—å–º '–ú–∞—Ç—Ä–∏—Ü–∞'\n";
    echo "--------------------------------\n";
    
    $matrixId = 301; // ID —Ñ–∏–ª—å–º–∞ "–ú–∞—Ç—Ä–∏—Ü–∞"
    $reviewFilter = new ReviewSearchFilter();
    $reviewFilter->movieId($matrixId)
                 ->type(ReviewType::POSITIVE);
    
    $reviews = $reviewRequests->searchReviews($reviewFilter, 1, 5);
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤: {$reviews->total}\n\n";
    
    foreach ($reviews->docs as $index => $review) {
        echo sprintf("%d. %s\n", 
            $index + 1, 
            $review->title ?? '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
        );
        echo "   üë§ –ê–≤—Ç–æ—Ä: {$review->author}\n";
        echo "   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {$review->reviewRating}\n";
        echo "   üìÖ –î–∞—Ç–∞: {$review->date}\n";
        echo "   üìù " . substr($review->review ?? '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞', 0, 150) . "...\n\n";
    }
    
    echo "\n";

    // 2. –ü–æ–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤
    echo "üé≠ 2. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∑—ã–≤—ã –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã\n";
    echo "---------------------------------------------\n";
    
    $criticFilter = new ReviewSearchFilter();
    $criticFilter->type(ReviewType::NEGATIVE)
                 ->limit(5);
    
    $criticReviews = $reviewRequests->searchReviews($criticFilter, 1, 5);
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {$criticReviews->total}\n\n";
    
    foreach ($criticReviews->docs as $index => $review) {
        echo sprintf("%d. %s\n", 
            $index + 1, 
            $review->title ?? '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
        );
        echo "   üé¨ –§–∏–ª—å–º: {$review->movieId}\n";
        echo "   üë§ –ê–≤—Ç–æ—Ä: {$review->author}\n";
        echo "   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {$review->reviewRating}\n";
        echo "   üìù " . substr($review->review ?? '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞', 0, 100) . "...\n\n";
    }
    
    echo "\n";

    // 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–∞
    echo "üìä 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–∞\n";
    echo "------------------------------\n";
    
    $movie = $movieRequests->getMovieById($matrixId);
    
    echo "üé¨ –§–∏–ª—å–º: {$movie->name}\n";
    echo "üìä –†–µ–π—Ç–∏–Ω–≥–∏:\n";
    
    if (!empty($movie->rating)) {
        $rating = $movie->rating;
        echo "   ‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: " . ($rating->kp ?? 'N/A') . "\n";
        echo "   üåü IMDB: " . ($rating->imdb ?? 'N/A') . "\n";
        echo "   üé≠ –ö—Ä–∏—Ç–∏–∫–∏: " . ($rating->filmCritics ?? 'N/A') . "\n";
        echo "   üë• –ó—Ä–∏—Ç–µ–ª–∏: " . ($rating->russianFilmCritics ?? 'N/A') . "\n";
    }
    
    if (!empty($movie->votes)) {
        $votes = $movie->votes;
        echo "üìà –ì–æ–ª–æ—Å–∞:\n";
        echo "   üë• –ö–∏–Ω–æ–ø–æ–∏—Å–∫: " . number_format($votes->kp ?? 0) . "\n";
        echo "   üåü IMDB: " . number_format($votes->imdb ?? 0) . "\n";
        echo "   üé≠ –ö—Ä–∏—Ç–∏–∫–∏: " . number_format($votes->filmCritics ?? 0) . "\n";
    }
    
    echo "\n";

    // 4. –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
    echo "‚≠ê 4. –û—Ç–∑—ã–≤—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º\n";
    echo "--------------------------------\n";
    
    $highRatingFilter = new ReviewSearchFilter();
    $highRatingFilter->reviewRating(8, 'gte')
                     ->type(ReviewType::POSITIVE)
                     ->limit(5);
    
    $highRatingReviews = $reviewRequests->searchReviews($highRatingFilter, 1, 5);
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 8+: {$highRatingReviews->total}\n\n";
    
    foreach ($highRatingReviews->docs as $index => $review) {
        echo sprintf("%d. %s\n", 
            $index + 1, 
            $review->title ?? '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
        );
        echo "   üë§ –ê–≤—Ç–æ—Ä: {$review->author}\n";
        echo "   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {$review->reviewRating}\n";
        echo "   üìù " . substr($review->review ?? '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞', 0, 120) . "...\n\n";
    }
    
    echo "\n";

    // 5. –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –∞–≤—Ç–æ—Ä—É
    echo "üë§ 5. –û—Ç–∑—ã–≤—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞\n";
    echo "--------------------------------\n";
    
    $authorFilter = new ReviewSearchFilter();
    $authorFilter->author('–ö—Ä–∏—Ç–∏–∫')
                 ->limit(3);
    
    $authorReviews = $reviewRequests->searchReviews($authorFilter, 1, 3);
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –∞–≤—Ç–æ—Ä–∞: {$authorReviews->total}\n\n";
    
    foreach ($authorReviews->docs as $index => $review) {
        echo sprintf("%d. %s\n", 
            $index + 1, 
            $review->title ?? '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
        );
        echo "   üé¨ –§–∏–ª—å–º: {$review->movieId}\n";
        echo "   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {$review->reviewRating}\n";
        echo "   üìÖ –î–∞—Ç–∞: {$review->date}\n";
        echo "   üìù " . substr($review->review ?? '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞', 0, 100) . "...\n\n";
    }
    
    echo "\n";

    // 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ —Ñ–∏–ª—å–º–æ–≤
    echo "üìä 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤\n";
    echo "--------------------------------------------\n";
    
    $popularMovies = [301, 326, 328]; // –ú–∞—Ç—Ä–∏—Ü–∞, –ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞, –ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è
    $movieNames = ['–ú–∞—Ç—Ä–∏—Ü–∞', '–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞', '–ó–µ–ª–µ–Ω–∞—è –º–∏–ª—è'];
    
    echo "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:\n\n";
    
    for ($i = 0; $i < count($popularMovies); $i++) {
        $movie = $movieRequests->getMovieById($popularMovies[$i]);
        $rating = $movie->rating;
        
        echo sprintf("%d. %s:\n", 
            $i + 1, 
            $movieNames[$i]
        );
        echo "   ‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: " . ($rating->kp ?? 'N/A') . "\n";
        echo "   üåü IMDB: " . ($rating->imdb ?? 'N/A') . "\n";
        echo "   üë• –ì–æ–ª–æ—Å–æ–≤ –ö–ü: " . number_format($movie->votes->kp ?? 0) . "\n\n";
    }
    
    echo "\n";

    // 7. –ü–æ–∏—Å–∫ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –¥–∞—Ç–µ
    echo "üìÖ 7. –ù–µ–¥–∞–≤–Ω–∏–µ –æ—Ç–∑—ã–≤—ã\n";
    echo "----------------------\n";
    
    $recentFilter = new ReviewSearchFilter();
    $recentFilter->limit(5);
    
    $recentReviews = $reviewRequests->searchReviews($recentFilter, 1, 5);
    
    echo "üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö –æ—Ç–∑—ã–≤–æ–≤: {$recentReviews->total}\n\n";
    
    foreach ($recentReviews->docs as $index => $review) {
        echo sprintf("%d. %s\n", 
            $index + 1, 
            $review->title ?? '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞'
        );
        echo "   üë§ –ê–≤—Ç–æ—Ä: {$review->author}\n";
        echo "   üìÖ –î–∞—Ç–∞: {$review->date}\n";
        echo "   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: {$review->reviewRating}\n";
        echo "   üìù " . substr($review->review ?? '–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞', 0, 80) . "...\n\n";
    }
    
    echo "\n";

    // 8. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤
    echo "üìà 8. –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤\n";
    echo "--------------------------------\n";
    
    $positiveFilter = new ReviewSearchFilter();
    $positiveFilter->type(ReviewType::POSITIVE)
                   ->limit(3);
    
    $negativeFilter = new ReviewSearchFilter();
    $negativeFilter->type(ReviewType::NEGATIVE)
                   ->limit(3);
    
    $neutralFilter = new ReviewSearchFilter();
    $neutralFilter->type(ReviewType::NEUTRAL)
                  ->limit(3);
    
    $positiveReviews = $reviewRequests->searchReviews($positiveFilter, 1, 3);
    $negativeReviews = $reviewRequests->searchReviews($negativeFilter, 1, 3);
    $neutralReviews = $reviewRequests->searchReviews($neutralFilter, 1, 3);
    
    echo "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤:\n";
    echo "   üëç –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ: {$positiveReviews->total}\n";
    echo "   üëé –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ: {$negativeReviews->total}\n";
    echo "   üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ: {$neutralReviews->total}\n\n";
    
    echo "üëç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:\n";
    foreach (array_slice($positiveReviews->docs, 0, 2) as $review) {
        echo "   ‚Ä¢ {$review->title} (‚≠ê {$review->reviewRating})\n";
    }
    
    echo "\nüëé –ü—Ä–∏–º–µ—Ä—ã –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤:\n";
    foreach (array_slice($negativeReviews->docs, 0, 2) as $review) {
        echo "   ‚Ä¢ {$review->title} (‚≠ê {$review->reviewRating})\n";
    }
    
    echo "\n";

    echo "‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n";

} catch (KinopoiskDevException $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
} catch (Exception $e) {
    echo "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

echo "\nüéâ –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∑—ã–≤–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"; 